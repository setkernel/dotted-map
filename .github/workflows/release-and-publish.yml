name: 🚀 Release & Publish Package

on:
  workflow_dispatch:
    inputs:
      version_type:
        description: 'Version bump type'
        required: true
        default: 'patch'
        type: choice
        options:
          - patch
          - minor
          - major
      skip_tests:
        description: 'Skip tests (for emergency releases)'
        required: false
        default: false
        type: boolean
      dry_run:
        description: 'Dry run (test without creating release)'
        required: false
        default: false
        type: boolean

env:
  NODE_VERSION: '20.x'

jobs:
  run-pre-release-validation:
    name: 🔍 Pre-Release Validation & Testing
    runs-on: ubuntu-latest
    if: github.event.inputs.skip_tests != 'true'
    outputs:
      current_version: ${{ steps.version.outputs.current_version }}
      changes_count: ${{ steps.changes.outputs.changes_count }}
      last_tag: ${{ steps.changes.outputs.last_tag }}
    steps:
      - name: 📥 Checkout repository with full history
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: ⚙️ Setup Node.js environment for validation
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: 📜 Extract current version information
        id: version
        run: |
          echo "current_version=$(node -p "require('./package.json').version")" >> $GITHUB_OUTPUT

      - name: 🔍 Analyze changes since last release
        id: changes
        run: |
          LAST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "")
          if [ -z "$LAST_TAG" ]; then
            echo "changes_count=0" >> $GITHUB_OUTPUT
            echo "last_tag=none" >> $GITHUB_OUTPUT
          else
            CHANGES=$(git log $LAST_TAG..HEAD --oneline | wc -l)
            echo "changes_count=$CHANGES" >> $GITHUB_OUTPUT
            echo "last_tag=$LAST_TAG" >> $GITHUB_OUTPUT
          fi

      - name: 📦 Install project dependencies
        run: npm ci

      - name: 🧪 Execute comprehensive pre-release testing
        run: |
          npm run format:check || echo "⚠️ Code formatting issues found"
          npm run build
          npm run test:all

      - name: 📤 Upload validated build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: dotted-map-next-validated-artifacts-${{ github.sha }}
          path: |
            index.js
            without-countries.js
            index.d.ts
            without-countries.d.ts

  create-github-release:
    name: 🏷️ Create GitHub Release
    needs: [run-pre-release-validation]
    runs-on: ubuntu-latest
    if: always() && (needs.run-pre-release-validation.result == 'success' || github.event.inputs.skip_tests == 'true')
    permissions:
      contents: write
    outputs:
      new_version: ${{ steps.version.outputs.new_version }}
      version_without_v: ${{ steps.version.outputs.version_without_v }}
      release_created: ${{ steps.release_flag.outputs.release_created }}
    steps:
      - name: 📥 Checkout repository for release creation
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: ⚙️ Setup Node.js environment for release
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: 📦 Install dependencies for release build
        run: npm ci

      - name: 🔧 Configure Git for automated commits
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"

      - name: ⬆️ Bump package version
        id: version
        run: |
          VERSION_TYPE="${{ github.event.inputs.version_type || 'patch' }}"
          NEW_VERSION=$(npm version $VERSION_TYPE --no-git-tag-version)
          echo "new_version=$NEW_VERSION" >> $GITHUB_OUTPUT
          echo "version_without_v=${NEW_VERSION#v}" >> $GITHUB_OUTPUT

      - name: 📝 Generate automated changelog
        run: |
          LAST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "")
          if [ -z "$LAST_TAG" ]; then
            COMMITS=$(git log --oneline --pretty=format:"- %s" HEAD)
          else
            COMMITS=$(git log --oneline --pretty=format:"- %s" $LAST_TAG..HEAD)
          fi
          
          cat > RELEASE_NOTES.md << EOF
          ## What's Changed
          
          $COMMITS
          
          ## Installation
          
          \`\`\`bash
          npm install @setkernel/dotted-map-next@${{ steps.version.outputs.version_without_v }}
          \`\`\`
          
          ## Usage
          
          \`\`\`javascript
          const DottedMap = require('@setkernel/dotted-map-next').default;
          const map = new DottedMap({ height: 60, grid: 'diagonal' });
          \`\`\`
          
          **Full Changelog**: https://github.com/setkernel/dotted-map-next/compare/$LAST_TAG...${{ steps.version.outputs.new_version }}
          EOF

      - name: 🔨 Build production package for release
        run: npm run build

      - name: 💾 Commit version bump to repository
        if: github.event.inputs.dry_run != 'true'
        run: |
          git add package.json package-lock.json
          git commit -m "chore: bump version to ${{ steps.version.outputs.new_version }}"
          git push origin main

      - name: 🏷️ Create GitHub release with changelog
        id: release
        if: github.event.inputs.dry_run != 'true'
        uses: ncipollo/release-action@v1
        with:
          tag: ${{ steps.version.outputs.new_version }}
          name: ${{ steps.version.outputs.new_version }}
          bodyFile: RELEASE_NOTES.md
          draft: false
          prerelease: false
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: 🚩 Set release creation status flag
        id: release_flag
        run: |
          if [ "${{ github.event.inputs.dry_run }}" == "true" ]; then
            echo "release_created=false" >> $GITHUB_OUTPUT
          else
            echo "release_created=true" >> $GITHUB_OUTPUT
          fi

      - name: 🧪 Display dry run preview summary
        if: github.event.inputs.dry_run == 'true'
        run: |
          echo "🧪 **DRY RUN MODE - No Release Created**" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "- **Would create version**: ${{ steps.version.outputs.new_version }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Changes since last tag**: ${{ needs.run-pre-release-validation.outputs.changes_count || 'unknown' }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Last tag**: ${{ needs.run-pre-release-validation.outputs.last_tag || 'unknown' }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Release notes preview:**" >> $GITHUB_STEP_SUMMARY
          cat RELEASE_NOTES.md >> $GITHUB_STEP_SUMMARY

  publish-to-registries:
    name: 📦 Publish Package to Registries
    needs: [run-pre-release-validation, create-github-release]
    runs-on: ubuntu-latest
    if: always() && needs.create-github-release.outputs.release_created == 'true' && (needs.run-pre-release-validation.result == 'success' || github.event.inputs.skip_tests == 'true')
    strategy:
      matrix:
        registry:
          - name: NPM
            url: https://registry.npmjs.org
            token: NPM_TOKEN
          - name: GitHub Packages
            url: https://npm.pkg.github.com
            token: GITHUB_TOKEN
    steps:
      - name: 📥 Checkout code for package publishing
        uses: actions/checkout@v4

      - name: ⚙️ Setup Node.js for ${{ matrix.registry.name }} registry
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          registry-url: ${{ matrix.registry.url }}
          cache: 'npm'

      - name: 📦 Install dependencies for publishing
        run: npm ci

      - name: 🔨 Build package for ${{ matrix.registry.name }} deployment
        run: npm run build

      - name: 🚀 Deploy package to ${{ matrix.registry.name }} registry
        run: npm publish --access public
        env:
          NODE_AUTH_TOKEN: ${{ secrets[matrix.registry.token] }}

      - name: 📊 Generate deployment success summary
        run: |
          echo "🚀 **Package Published to ${{ matrix.registry.name }}!**" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "- **Package**: @setkernel/dotted-map-next" >> $GITHUB_STEP_SUMMARY
          echo "- **Version**: ${{ needs.create-github-release.outputs.version_without_v }}" >> $GITHUB_STEP_SUMMARY
          if [ "${{ matrix.registry.name }}" == "NPM" ]; then
            echo "- **NPM**: https://www.npmjs.com/package/@setkernel/dotted-map-next" >> $GITHUB_STEP_SUMMARY
            echo "- **Install**: \`npm install @setkernel/dotted-map-next\`" >> $GITHUB_STEP_SUMMARY
          else
            echo "- **GitHub Packages**: https://github.com/setkernel/dotted-map-next/packages" >> $GITHUB_STEP_SUMMARY
          fi

  send-release-notifications:
    name: 📣 Send Release Completion Notifications
    needs: [run-pre-release-validation, create-github-release, publish-to-registries]
    runs-on: ubuntu-latest
    if: always() && needs.create-github-release.outputs.release_created == 'true'
    steps:
      - name: 📊 Generate comprehensive release summary
        run: |
          echo "🎉 **Release Complete!**" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "- **Package**: @setkernel/dotted-map-next" >> $GITHUB_STEP_SUMMARY
          echo "- **Version**: ${{ needs.create-github-release.outputs.new_version }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Previous Version**: ${{ needs.run-pre-release-validation.outputs.current_version || 'unknown' }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Repository**: https://github.com/setkernel/dotted-map-next" >> $GITHUB_STEP_SUMMARY
          echo "- **Release**: https://github.com/setkernel/dotted-map-next/releases/tag/${{ needs.create-github-release.outputs.new_version }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          if [ "${{ needs.publish-to-registries.result }}" == "success" ]; then
            echo "✅ **Publishing**: Success" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ **Publishing**: Failed" >> $GITHUB_STEP_SUMMARY
          fi