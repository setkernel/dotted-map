name: Release Management

on:
  push:
    branches: [main]
  workflow_dispatch:
    inputs:
      version_type:
        description: 'Version bump type'
        required: true
        default: 'patch'
        type: choice
        options:
          - patch
          - minor
          - major

jobs:
  check-changes:
    name: Check for Changes
    runs-on: ubuntu-latest
    outputs:
      should_release: ${{ steps.check.outputs.should_release }}
      current_version: ${{ steps.version.outputs.current_version }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Get current version
        id: version
        run: |
          echo "current_version=$(node -p "require('./package.json').version")" >> $GITHUB_OUTPUT

      - name: Check if release is needed
        id: check
        run: |
          if [ "${{ github.event_name }}" == "workflow_dispatch" ]; then
            echo "should_release=true" >> $GITHUB_OUTPUT
          else
            # Check if there are any changes since last release
            LAST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "")
            if [ -z "$LAST_TAG" ]; then
              echo "should_release=true" >> $GITHUB_OUTPUT
            else
              CHANGES=$(git log $LAST_TAG..HEAD --oneline | wc -l)
              if [ $CHANGES -gt 0 ]; then
                echo "should_release=true" >> $GITHUB_OUTPUT
              else
                echo "should_release=false" >> $GITHUB_OUTPUT
              fi
            fi
          fi

  create-release:
    name: Create Release
    needs: check-changes
    runs-on: ubuntu-latest
    if: needs.check-changes.outputs.should_release == 'true'
    permissions:
      contents: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20.x'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Configure git
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"

      - name: Bump version
        id: version
        run: |
          VERSION_TYPE="${{ github.event.inputs.version_type || 'patch' }}"
          NEW_VERSION=$(npm version $VERSION_TYPE --no-git-tag-version)
          echo "new_version=$NEW_VERSION" >> $GITHUB_OUTPUT
          echo "version_without_v=${NEW_VERSION#v}" >> $GITHUB_OUTPUT

      - name: Generate changelog
        id: changelog
        run: |
          # Get commits since last tag
          LAST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "")
          if [ -z "$LAST_TAG" ]; then
            COMMITS=$(git log --oneline --pretty=format:"- %s" HEAD)
          else
            COMMITS=$(git log --oneline --pretty=format:"- %s" $LAST_TAG..HEAD)
          fi
          
          # Create changelog
          cat > RELEASE_NOTES.md << EOF
          ## What's Changed
          
          $COMMITS
          
          ## Installation
          
          \`\`\`bash
          npm install @setkernel/dotted-map-next@${{ steps.version.outputs.version_without_v }}
          \`\`\`
          
          ## Usage
          
          \`\`\`javascript
          const DottedMap = require('@setkernel/dotted-map-next').default;
          const map = new DottedMap({ height: 60, grid: 'diagonal' });
          \`\`\`
          
          **Full Changelog**: https://github.com/setkernel/dotted-map-next/compare/$LAST_TAG...${{ steps.version.outputs.new_version }}
          EOF

      - name: Commit version bump
        run: |
          git add package.json package-lock.json
          git commit -m "chore: bump version to ${{ steps.version.outputs.new_version }}"
          git push origin main

      - name: Create Release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ steps.version.outputs.new_version }}
          release_name: ${{ steps.version.outputs.new_version }}
          body_path: RELEASE_NOTES.md
          draft: false
          prerelease: false

  notify-release:
    name: Notify Release
    needs: [check-changes, create-release]
    runs-on: ubuntu-latest
    if: needs.check-changes.outputs.should_release == 'true'
    steps:
      - name: Create release summary
        run: |
          echo "ðŸŽ‰ **New Release Created!**" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "- **Package**: @setkernel/dotted-map-next" >> $GITHUB_STEP_SUMMARY
          echo "- **Previous Version**: ${{ needs.check-changes.outputs.current_version }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Repository**: https://github.com/setkernel/dotted-map-next" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "The package will be automatically published to NPM when the release is created." >> $GITHUB_STEP_SUMMARY